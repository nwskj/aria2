name: aria2

on:
  push:
    tags:
      - 'v*'  # 推送v*标签时触发（如v1.37.0）

jobs:
  build:
    name: 构建 ${{ matrix.target }} 版本
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120  # 延长超时时间，避免构建中断
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: arm
            artifact: aria2-arm
            asset_name: aria2-${{ github.ref_name }}-arm.zip
            output_dir: /usr/local
          - os: windows-latest
            target: windows
            artifact: aria2-windows
            asset_name: aria2-${{ github.ref_name }}-windows.zip
            output_dir: ${{ github.workspace }}/build
          - os: macos-14
            target: macos
            artifact: aria2-macos
            asset_name: aria2-${{ github.ref_name }}-macos.zip
            output_dir: /usr/local

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          repository: nwskj/aria2
          fetch-depth: 0

      - name: 安装依赖 (Linux/ARM)
        if: matrix.target == 'arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool pkg-config \
            libssl-dev zlib1g-dev libc-ares-dev gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

      - name: 安装依赖 (Windows)
        if: matrix.target == 'windows'
        run: |
          choco install -y autoconf automake libtool pkgconfig openssl zlib
          echo "C:\Program Files\7-Zip" >> $env:GITHUB_PATH  # 添加7z到PATH

      - name: 安装依赖 (macOS)
        if: matrix.target == 'macos'
        run: |
          brew install autoconf automake libtool pkgconf sqlite c-ares libssh2 openssl@3 gettext

      - name: 配置构建 (ARM)
        if: matrix.target == 'arm'
        run: |
          ./autogen.sh
          ./configure --host=arm-linux-gnueabihf \
                      --prefix=${{ matrix.output_dir }} \
                      --with-ca-bundle=/etc/ssl/certs/ca-certificates.crt

      - name: 配置构建 (Windows)
        if: matrix.target == 'windows'
        run: |
          ./autogen.sh
          ./configure --prefix=${{ matrix.output_dir }} --enable-static

      - name: 配置构建 (macOS)
        if: matrix.target == 'macos'
        run: |
          ./autogen.sh
          ./configure --prefix=${{ matrix.output_dir }} \
                      --with-openssl=$(brew --prefix openssl@3)

      - name: 编译（限制并行数避免资源耗尽）
        run: |
          # 根据系统获取CPU核心数，并行数设为核心数的一半
          if [ "$RUNNER_OS" = "Windows" ]; then
            cores=$(wmic cpu get NumberOfLogicalProcessors | findstr /r [0-9])
          else
            cores=$(nproc 2> /dev/null || sysctl -n hw.ncpu)
          fi
          make -j$((cores / 2))  # 减少并行任务，避免超时

      - name: 安装到指定目录
        run: make install

      - name: 验证安装结果（调试）
        run: |
          echo "输出目录结构："
          ls -la ${{ matrix.output_dir }}
          echo "可执行文件验证："
          ls -la ${{ matrix.output_dir }}/bin

      - name: 打包构建产物
        run: |
          # 创建打包目录并复制文件
          mkdir -p ${{ matrix.artifact }}
          cp -r ${{ matrix.output_dir }}/bin ${{ matrix.artifact }}
          cp -r ${{ matrix.output_dir }}/share ${{ matrix.artifact }}

          # 压缩打包（处理不同系统路径格式）
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ${{ matrix.asset_name }} ${{ matrix.artifact }}\*
          else
            zip -r ${{ matrix.asset_name }} ${{ matrix.artifact }}
          fi

          # 验证压缩包
          echo "压缩包内容："
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z l ${{ matrix.asset_name }}
          else
            unzip -l ${{ matrix.asset_name }}
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.asset_name }}
          retention-days: 1

  release:
    name: 发布到GitHub Releases
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 验证产物完整性（调试）
        run: |
          echo "下载的产物列表："
          ls -R artifacts
          # 检查所有zip文件是否存在
          find artifacts -name "*.zip" -exec ls -lh {} \;

      - name: 准备发布文件
        run: |
          mkdir -p release_assets
          # 复制所有zip文件到统一目录
          find artifacts -name "*.zip" -exec cp {} release_assets/ \;
          ls -la release_assets/

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*.zip  # 上传所有打包好的文件
          name: aria2 ${{ github.ref_name }}
          body: |
            ## aria2 自动构建版本 ${{ github.ref_name }}
            
            本次发布包含以下平台版本：
            - ARM架构: aria2-${{ github.ref_name }}-arm.zip
            - Windows: aria2-${{ github.ref_name }}-windows.zip
            - macOS: aria2-${{ github.ref_name }}-macos.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
